2022-03-24 12:18:52:271 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Lenguaje (RULES (RULE program (BLOCK (ALT file))) (RULE file (BLOCK (ALT VOID MAIN PO PC KO (* (BLOCK (ALT body))) KC))) (RULE body (BLOCK (ALT PRINTF PO expr PC SCOL) (ALT if_sentence (? (BLOCK (ALT elif_sentence) (ALT else_sentence)))) (ALT INT ID ASSIGN expr SCOL) (ALT INT ID SCOL) (ALT ID ASSIGN expr SCOL))) (RULE elif_sentence (BLOCK (ALT ELSE if_sentence (? (BLOCK (ALT elif_sentence) (ALT else_sentence)))))) (RULE if_sentence (BLOCK (ALT IF PO condition PC KO (* (BLOCK (ALT body))) KC))) (RULE else_sentence (BLOCK (ALT ELSE KO (* (BLOCK (ALT body))) KC))) (RULE condition (BLOCK (ALT NOT condition) (ALT condition (BLOCK (ALT EQT) (ALT NEQT)) condition) (ALT condition (BLOCK (ALT GT) (ALT LT) (ALT GEQT) (ALT LEQT)) condition) (ALT condition AND condition) (ALT condition OR condition) (ALT TRUE) (ALT FALSE) (ALT PO condition PC) (ALT expr))) (RULE expr (BLOCK (ALT expr (= op (BLOCK (ALT MULT) (ALT DIV))) expr) (ALT expr (= op (BLOCK (ALT SUM) (ALT SUB))) expr) (ALT (? (BLOCK (ALT SUB))) NUM) (ALT ID) (ALT PO expr PC))) (RULE VOID (BLOCK (ALT 'void'))) (RULE MAIN (BLOCK (ALT 'main'))) (RULE PO (BLOCK (ALT '('))) (RULE PC (BLOCK (ALT ')'))) (RULE KO (BLOCK (ALT '{'))) (RULE KC (BLOCK (ALT '}'))) (RULE PRINTF (BLOCK (ALT 'printf'))) (RULE INT (BLOCK (ALT 'int'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE ASSIGN (BLOCK (ALT '='))) (RULE SCOL (BLOCK (ALT ';'))) (RULE EQT (BLOCK (ALT '=='))) (RULE NEQT (BLOCK (ALT '!='))) (RULE GT (BLOCK (ALT '>'))) (RULE LT (BLOCK (ALT '<'))) (RULE GEQT (BLOCK (ALT '>='))) (RULE LEQT (BLOCK (ALT '<='))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE NOT (BLOCK (ALT '!'))) (RULE NUM (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE LINECOM (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT .))) '\n') skip))) (RULE MULTILINECOM (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2022-03-24 12:18:52:291 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Lenguaje (RULES (RULE program (BLOCK (ALT file))) (RULE file (BLOCK (ALT VOID MAIN PO PC KO (* (BLOCK (ALT body))) KC))) (RULE body (BLOCK (ALT PRINTF PO expr PC SCOL) (ALT if_sentence (? (BLOCK (ALT elif_sentence) (ALT else_sentence)))) (ALT INT ID ASSIGN expr SCOL) (ALT INT ID SCOL) (ALT ID ASSIGN expr SCOL))) (RULE elif_sentence (BLOCK (ALT ELSE if_sentence (? (BLOCK (ALT elif_sentence) (ALT else_sentence)))))) (RULE if_sentence (BLOCK (ALT IF PO condition PC KO (* (BLOCK (ALT body))) KC))) (RULE else_sentence (BLOCK (ALT ELSE KO (* (BLOCK (ALT body))) KC))) (RULE condition (BLOCK (ALT NOT condition) (ALT condition (SET EQT NEQT) condition) (ALT condition (SET GT LT GEQT LEQT) condition) (ALT condition AND condition) (ALT condition OR condition) (ALT TRUE) (ALT FALSE) (ALT PO condition PC) (ALT expr))) (RULE expr (BLOCK (ALT expr (= op (SET MULT DIV)) expr) (ALT expr (= op (SET SUM SUB)) expr) (ALT (? (BLOCK (ALT SUB))) NUM) (ALT ID) (ALT PO expr PC))) (RULE VOID (BLOCK (ALT 'void'))) (RULE MAIN (BLOCK (ALT 'main'))) (RULE PO (BLOCK (ALT '('))) (RULE PC (BLOCK (ALT ')'))) (RULE KO (BLOCK (ALT '{'))) (RULE KC (BLOCK (ALT '}'))) (RULE PRINTF (BLOCK (ALT 'printf'))) (RULE INT (BLOCK (ALT 'int'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE ASSIGN (BLOCK (ALT '='))) (RULE SCOL (BLOCK (ALT ';'))) (RULE EQT (BLOCK (ALT '=='))) (RULE NEQT (BLOCK (ALT '!='))) (RULE GT (BLOCK (ALT '>'))) (RULE LT (BLOCK (ALT '<'))) (RULE GEQT (BLOCK (ALT '>='))) (RULE LEQT (BLOCK (ALT '<='))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE NOT (BLOCK (ALT '!'))) (RULE NUM (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE LINECOM (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT .))) '\n') skip))) (RULE MULTILINECOM (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2022-03-24 12:18:52:439 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Lenguaje (RULES (RULE program (BLOCK (ALT file))) (RULE file (BLOCK (ALT VOID MAIN PO PC KO (* (BLOCK (ALT body))) KC))) (RULE body (BLOCK (ALT PRINTF PO expr PC SCOL) (ALT if_sentence (? (BLOCK (ALT elif_sentence) (ALT else_sentence)))) (ALT INT ID ASSIGN expr SCOL) (ALT INT ID SCOL) (ALT ID ASSIGN expr SCOL))) (RULE elif_sentence (BLOCK (ALT ELSE if_sentence (? (BLOCK (ALT elif_sentence) (ALT else_sentence)))))) (RULE if_sentence (BLOCK (ALT IF PO condition PC KO (* (BLOCK (ALT body))) KC))) (RULE else_sentence (BLOCK (ALT ELSE KO (* (BLOCK (ALT body))) KC))) (RULE condition (BLOCK (ALT NOT condition) (ALT condition (SET EQT NEQT) condition) (ALT condition (SET GT LT GEQT LEQT) condition) (ALT condition AND condition) (ALT condition OR condition) (ALT TRUE) (ALT FALSE) (ALT PO condition PC) (ALT expr))) (RULE expr (BLOCK (ALT expr (= op (SET MULT DIV)) expr) (ALT expr (= op (SET SUM SUB)) expr) (ALT (? (BLOCK (ALT SUB))) NUM) (ALT ID) (ALT PO expr PC)))))
2022-03-24 12:18:52:439 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR LenguajeLexer (RULES (RULE VOID (BLOCK (ALT 'void'))) (RULE MAIN (BLOCK (ALT 'main'))) (RULE PO (BLOCK (ALT '('))) (RULE PC (BLOCK (ALT ')'))) (RULE KO (BLOCK (ALT '{'))) (RULE KC (BLOCK (ALT '}'))) (RULE PRINTF (BLOCK (ALT 'printf'))) (RULE INT (BLOCK (ALT 'int'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE ASSIGN (BLOCK (ALT '='))) (RULE SCOL (BLOCK (ALT ';'))) (RULE EQT (BLOCK (ALT '=='))) (RULE NEQT (BLOCK (ALT '!='))) (RULE GT (BLOCK (ALT '>'))) (RULE LT (BLOCK (ALT '<'))) (RULE GEQT (BLOCK (ALT '>='))) (RULE LEQT (BLOCK (ALT '<='))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false'))) (RULE NOT (BLOCK (ALT '!'))) (RULE NUM (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z]))) (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE LINECOM (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT .))) '\n') skip))) (RULE MULTILINECOM (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2022-03-24 12:18:52:738 left-recursion LogManager.java:25 condition
    :   ( {} NOT<tokenIndex=167> condition<tokenIndex=169,p=9> 
        | TRUE<tokenIndex=232>  
        | FALSE<tokenIndex=239>  
        | PO<tokenIndex=246> condition<tokenIndex=248> PC<tokenIndex=250>  
        | expr<tokenIndex=257>  
        )
        (
          {precpred(_ctx, 8)}?<p=8> (EQT<tokenIndex=179>|NEQT<tokenIndex=181>) condition<tokenIndex=184,p=9>
                  | {precpred(_ctx, 7)}?<p=7> (GT<tokenIndex=194>|LT<tokenIndex=196>|GEQT<tokenIndex=198>|LEQT<tokenIndex=200>) condition<tokenIndex=203,p=8>
                  | {precpred(_ctx, 6)}?<p=6> AND<tokenIndex=212> condition<tokenIndex=214,p=7>
                  | {precpred(_ctx, 5)}?<p=5> OR<tokenIndex=223> condition<tokenIndex=225,p=6>
        )*
    ;
2022-03-24 12:18:52:747 grammar LogManager.java:25 added: (RULE condition (BLOCK (ALT (BLOCK (ALT {} (NOT (ELEMENT_OPTIONS (= tokenIndex 167))) (condition (ELEMENT_OPTIONS (= tokenIndex 169) (= p 9)))) (ALT (TRUE (ELEMENT_OPTIONS (= tokenIndex 232)))) (ALT (FALSE (ELEMENT_OPTIONS (= tokenIndex 239)))) (ALT (PO (ELEMENT_OPTIONS (= tokenIndex 246))) (condition (ELEMENT_OPTIONS (= tokenIndex 248))) (PC (ELEMENT_OPTIONS (= tokenIndex 250)))) (ALT (expr (ELEMENT_OPTIONS (= tokenIndex 257))))) (* (BLOCK (ALT ({precpred(_ctx, 8)}? (ELEMENT_OPTIONS (= p 8))) (SET (EQT (ELEMENT_OPTIONS (= tokenIndex 179))) (NEQT (ELEMENT_OPTIONS (= tokenIndex 181)))) (condition (ELEMENT_OPTIONS (= tokenIndex 184) (= p 9)))) (ALT ({precpred(_ctx, 7)}? (ELEMENT_OPTIONS (= p 7))) (SET (GT (ELEMENT_OPTIONS (= tokenIndex 194))) (LT (ELEMENT_OPTIONS (= tokenIndex 196))) (GEQT (ELEMENT_OPTIONS (= tokenIndex 198))) (LEQT (ELEMENT_OPTIONS (= tokenIndex 200)))) (condition (ELEMENT_OPTIONS (= tokenIndex 203) (= p 8)))) (ALT ({precpred(_ctx, 6)}? (ELEMENT_OPTIONS (= p 6))) (AND (ELEMENT_OPTIONS (= tokenIndex 212))) (condition (ELEMENT_OPTIONS (= tokenIndex 214) (= p 7)))) (ALT ({precpred(_ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (OR (ELEMENT_OPTIONS (= tokenIndex 223))) (condition (ELEMENT_OPTIONS (= tokenIndex 225) (= p 6)))))))))
2022-03-24 12:18:52:752 left-recursion LogManager.java:25 expr
    :   ( {} SUB<tokenIndex=301>? NUM<tokenIndex=304>  
        | ID<tokenIndex=311>  
        | PO<tokenIndex=318> expr<tokenIndex=320> PC<tokenIndex=322>  
        )
        (
          {precpred(_ctx, 5)}?<p=5> op=(MULT<tokenIndex=272>|DIV<tokenIndex=274>) expr<tokenIndex=277,p=6>
                  | {precpred(_ctx, 4)}?<p=4> op=(SUM<tokenIndex=289>|SUB<tokenIndex=291>) expr<tokenIndex=294,p=5>
        )*
    ;
2022-03-24 12:18:52:755 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (? (BLOCK (ALT (SUB (ELEMENT_OPTIONS (= tokenIndex 301)))))) (NUM (ELEMENT_OPTIONS (= tokenIndex 304)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 311)))) (ALT (PO (ELEMENT_OPTIONS (= tokenIndex 318))) (expr (ELEMENT_OPTIONS (= tokenIndex 320))) (PC (ELEMENT_OPTIONS (= tokenIndex 322))))) (* (BLOCK (ALT ({precpred(_ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (= op (SET (MULT (ELEMENT_OPTIONS (= tokenIndex 272))) (DIV (ELEMENT_OPTIONS (= tokenIndex 274))))) (expr (ELEMENT_OPTIONS (= tokenIndex 277) (= p 6)))) (ALT ({precpred(_ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) (= op (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 289))) (SUB (ELEMENT_OPTIONS (= tokenIndex 291))))) (expr (ELEMENT_OPTIONS (= tokenIndex 294) (= p 5)))))))))
2022-03-24 12:18:52:757 semantics LogManager.java:25 tokens={EOF=-1, VOID=1, MAIN=2, PO=3, PC=4, KO=5, KC=6, PRINTF=7, INT=8, IF=9, ELSE=10, MULT=11, DIV=12, SUM=13, SUB=14, ASSIGN=15, SCOL=16, EQT=17, NEQT=18, GT=19, LT=20, GEQT=21, LEQT=22, AND=23, OR=24, TRUE=25, FALSE=26, NOT=27, NUM=28, ID=29, LINECOM=30, MULTILINECOM=31, WS=32}
2022-03-24 12:18:52:758 semantics LogManager.java:25 strings={'void'=1, 'main'=2, '('=3, ')'=4, '{'=5, '}'=6, 'printf'=7, 'int'=8, 'if'=9, 'else'=10, '*'=11, '/'=12, '+'=13, '-'=14, '='=15, ';'=16, '=='=17, '!='=18, '>'=19, '<'=20, '>='=21, '<='=22, '&&'=23, '||'=24, 'true'=25, 'false'=26, '!'=27}
2022-03-24 12:18:52:769 LL1 LogManager.java:25 
DECISION 0 in rule file
2022-03-24 12:18:52:770 LL1 LogManager.java:25 look=[{7..9, 29}, 6]
2022-03-24 12:18:52:770 LL1 LogManager.java:25 LL(1)? true
2022-03-24 12:18:52:770 LL1 LogManager.java:25 
DECISION 1 in rule body
2022-03-24 12:18:52:770 LL1 LogManager.java:25 look=[10, 10, {6..9, 29}]
2022-03-24 12:18:52:770 LL1 LogManager.java:25 LL(1)? false
2022-03-24 12:18:52:770 LL1 LogManager.java:25 
DECISION 2 in rule body
2022-03-24 12:18:52:770 LL1 LogManager.java:25 look=[7, 9, 8, 8, 29]
2022-03-24 12:18:52:770 LL1 LogManager.java:25 LL(1)? false
2022-03-24 12:18:52:770 LL1 LogManager.java:25 
DECISION 3 in rule elif_sentence
2022-03-24 12:18:52:770 LL1 LogManager.java:25 look=[10, 10, {6..9, 29}]
2022-03-24 12:18:52:770 LL1 LogManager.java:25 LL(1)? false
2022-03-24 12:18:52:771 LL1 LogManager.java:25 
DECISION 4 in rule if_sentence
2022-03-24 12:18:52:771 LL1 LogManager.java:25 look=[{7..9, 29}, 6]
2022-03-24 12:18:52:771 LL1 LogManager.java:25 LL(1)? true
2022-03-24 12:18:52:771 LL1 LogManager.java:25 
DECISION 5 in rule else_sentence
2022-03-24 12:18:52:771 LL1 LogManager.java:25 look=[{7..9, 29}, 6]
2022-03-24 12:18:52:771 LL1 LogManager.java:25 LL(1)? true
2022-03-24 12:18:52:771 LL1 LogManager.java:25 
DECISION 6 in rule condition
2022-03-24 12:18:52:771 LL1 LogManager.java:25 look=[27, 25, 26, 3, {3, 14, 28..29}]
2022-03-24 12:18:52:771 LL1 LogManager.java:25 LL(1)? false
2022-03-24 12:18:52:771 LL1 LogManager.java:25 
DECISION 7 in rule condition
2022-03-24 12:18:52:771 LL1 LogManager.java:25 look=[null, null, null, null]
2022-03-24 12:18:52:771 LL1 LogManager.java:25 LL(1)? false
2022-03-24 12:18:52:771 LL1 LogManager.java:25 
DECISION 8 in rule condition
2022-03-24 12:18:52:771 LL1 LogManager.java:25 look=[null, null]
2022-03-24 12:18:52:771 LL1 LogManager.java:25 LL(1)? false
2022-03-24 12:18:52:771 LL1 LogManager.java:25 
DECISION 9 in rule expr
2022-03-24 12:18:52:771 LL1 LogManager.java:25 look=[14, 28]
2022-03-24 12:18:52:772 LL1 LogManager.java:25 LL(1)? true
2022-03-24 12:18:52:772 LL1 LogManager.java:25 
DECISION 10 in rule expr
2022-03-24 12:18:52:772 LL1 LogManager.java:25 look=[{14, 28}, 29, 3]
2022-03-24 12:18:52:772 LL1 LogManager.java:25 LL(1)? true
2022-03-24 12:18:52:772 LL1 LogManager.java:25 
DECISION 11 in rule expr
2022-03-24 12:18:52:772 LL1 LogManager.java:25 look=[null, null]
2022-03-24 12:18:52:772 LL1 LogManager.java:25 LL(1)? false
2022-03-24 12:18:52:772 LL1 LogManager.java:25 
DECISION 12 in rule expr
2022-03-24 12:18:52:772 LL1 LogManager.java:25 look=[null, null]
2022-03-24 12:18:52:772 LL1 LogManager.java:25 LL(1)? false
2022-03-24 12:18:52:796 action-translator LogManager.java:25 translate 
2022-03-24 12:18:52:797 action-translator LogManager.java:25 translate precpred(_ctx, 8)
2022-03-24 12:18:52:798 action-translator LogManager.java:25 translate precpred(_ctx, 7)
2022-03-24 12:18:52:798 action-translator LogManager.java:25 translate precpred(_ctx, 6)
2022-03-24 12:18:52:798 action-translator LogManager.java:25 translate precpred(_ctx, 5)
2022-03-24 12:18:52:799 action-translator LogManager.java:25 translate precpred(_ctx, 8)
2022-03-24 12:18:52:799 action-translator LogManager.java:25 translate precpred(_ctx, 7)
2022-03-24 12:18:52:800 action-translator LogManager.java:25 translate precpred(_ctx, 6)
2022-03-24 12:18:52:800 action-translator LogManager.java:25 translate precpred(_ctx, 5)
2022-03-24 12:18:52:801 action-translator LogManager.java:25 translate 
2022-03-24 12:18:52:802 action-translator LogManager.java:25 translate precpred(_ctx, 5)
2022-03-24 12:18:52:803 action-translator LogManager.java:25 translate precpred(_ctx, 4)
2022-03-24 12:18:52:803 action-translator LogManager.java:25 translate precpred(_ctx, 5)
2022-03-24 12:18:52:803 action-translator LogManager.java:25 translate precpred(_ctx, 4)
